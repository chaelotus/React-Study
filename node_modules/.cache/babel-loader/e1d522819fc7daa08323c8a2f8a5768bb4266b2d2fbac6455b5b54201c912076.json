{"ast":null,"code":"var _jsxFileName = \"/Users/parkchaeyeon/Downloads/react-complete-guide/src/components/Expenses/ExpenseItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card\";\nimport userEvent from \"@testing-library/user-event\";\n//비용 아이템 저장\n//파일 이름 정할 때 첫글자 대문자\n//리액트에 있는 컴포넌트는 단지 자바스크립트 함수일 뿐\n//관습상 함수 이름을 파일이름으로\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseItem = props => {\n  _s();\n  //반환하는 요소안에 루트요소가 하나만 있어야 함\n  //여기서 보이는 코드는 html처럼 보이지만 리액트팀에서 만든 특별한 jsx구문이고 여전히 js코드이다.\n  //그래서 대부분의 속성들이 같지만 모두 똑같지는 않다.\n  //여기서는 class를 className으로 사용하는데 class는 자바스크립트에서 예약된 단어이기 때문이다.\n\n  //Data는 내장객체이기 때문에 텍스트로 출력될 수 없다.\n  //모든 Date 객체에 사용 가능한 내장 메서드인 toISOString을 사용할 수 있다.\n\n  const [title, setTitle] = useState(props.title);\n  //리액트 훅이라고도 한다. 다른 중요한 훅들도 있겠지만 이것은 가중 중요한 훅 중 하나\n  //이런 훅들은 이름이 use로 시작하여 쉽게 알아차릴 수 있다.\n  //리액트 컴포넌트 함수 안에서 실행되어야 함(중첩 함수 안에도 안됨)\n  //useState()는 기본적인 state값 대신 userState()로 특별한 종류의 변수 생성함\n  //변수의 변경사항으로 인해 컴포넌트 함수가 다시 호출될 수 있음\n\n  const clickHandler = () => {\n    setTitle(\"Updated!\");\n    console.log(title);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"Change title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n//여기서 반환하는 코드 html코드는 jsx코드로 컴포넌트로 화면에 불러 와야한다.\n//컴포넌트는 html코드를 반환하는 함수일 뿐이다.\n//컴포넌트에서 반환하는 html코드는 컴포넌트가 화면에 렌더링하는것이 무엇인가에 따라 다르다.\n\n//이 파일에서 내보니어 다른 파일에서도 사용할 수 있게끔\n_s(ExpenseItem, \"ceUz0wjPP/oTY3+evv2xH5hljW4=\");\n_c = ExpenseItem;\nexport default ExpenseItem;\n//이 함수를 이 파일의 기본 함수로 내보내겠다.\n//그럼 이 파일을 다른 파일에서 import할 수 있다.\nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["React","useState","ExpenseDate","Card","userEvent","jsxDEV","_jsxDEV","ExpenseItem","props","_s","title","setTitle","clickHandler","console","log","className","children","date","fileName","_jsxFileName","lineNumber","columnNumber","amount","onClick","_c","$RefreshReg$"],"sources":["/Users/parkchaeyeon/Downloads/react-complete-guide/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport ExpenseDate from \"./ExpenseDate\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card\";\nimport userEvent from \"@testing-library/user-event\";\n//비용 아이템 저장\n//파일 이름 정할 때 첫글자 대문자\n//리액트에 있는 컴포넌트는 단지 자바스크립트 함수일 뿐\n//관습상 함수 이름을 파일이름으로\nconst ExpenseItem = (props) => {\n  //반환하는 요소안에 루트요소가 하나만 있어야 함\n  //여기서 보이는 코드는 html처럼 보이지만 리액트팀에서 만든 특별한 jsx구문이고 여전히 js코드이다.\n  //그래서 대부분의 속성들이 같지만 모두 똑같지는 않다.\n  //여기서는 class를 className으로 사용하는데 class는 자바스크립트에서 예약된 단어이기 때문이다.\n\n  //Data는 내장객체이기 때문에 텍스트로 출력될 수 없다.\n  //모든 Date 객체에 사용 가능한 내장 메서드인 toISOString을 사용할 수 있다.\n\n  const [title, setTitle] = useState(props.title);\n  //리액트 훅이라고도 한다. 다른 중요한 훅들도 있겠지만 이것은 가중 중요한 훅 중 하나\n  //이런 훅들은 이름이 use로 시작하여 쉽게 알아차릴 수 있다.\n  //리액트 컴포넌트 함수 안에서 실행되어야 함(중첩 함수 안에도 안됨)\n  //useState()는 기본적인 state값 대신 userState()로 특별한 종류의 변수 생성함\n  //변수의 변경사항으로 인해 컴포넌트 함수가 다시 호출될 수 있음\n\n  const clickHandler = () => {\n    setTitle(\"Updated!\");\n    console.log(title);\n  };\n\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n      <div className=\"expense-item__description\">\n        <h2>{title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n      </div>\n      <button onClick={clickHandler}>Change title</button>\n    </Card>\n  );\n};\n//여기서 반환하는 코드 html코드는 jsx코드로 컴포넌트로 화면에 불러 와야한다.\n//컴포넌트는 html코드를 반환하는 함수일 뿐이다.\n//컴포넌트에서 반환하는 html코드는 컴포넌트가 화면에 렌더링하는것이 무엇인가에 따라 다르다.\n\n//이 파일에서 내보니어 다른 파일에서도 사용할 수 있게끔\nexport default ExpenseItem;\n//이 함수를 이 파일의 기본 함수로 내보내겠다.\n//그럼 이 파일을 다른 파일에서 import할 수 있다.\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,mBAAmB;AAC1B,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,SAAS,MAAM,6BAA6B;AACnD;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACO,KAAK,CAACE,KAAK,CAAC;EAC/C;EACA;EACA;EACA;EACA;;EAEA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBD,QAAQ,CAAC,UAAU,CAAC;IACpBE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACpB,CAAC;EAED,oBACEJ,OAAA,CAACH,IAAI;IAACY,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC5BV,OAAA,CAACJ,WAAW;MAACe,IAAI,EAAET,KAAK,CAACS;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjCf,OAAA;MAAKS,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCV,OAAA;QAAAU,QAAA,EAAKN;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAChBf,OAAA;QAAKS,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,GAAC,EAACR,KAAK,CAACc,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtD,eACNf,OAAA;MAAQiB,OAAO,EAAEX,YAAa;MAAAI,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/C;AAEX,CAAC;AACD;AACA;AACA;;AAEA;AAAAZ,EAAA,CApCMF,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AAqCjB,eAAeA,WAAW;AAC1B;AACA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}