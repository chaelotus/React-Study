{"ast":null,"code":"var _jsxFileName = \"/Users/parkchaeyeon/Downloads/react-complete-guide/src/App.js\",\n  _s = $RefreshSig$();\n//사용자 지정 컴포넌트 임포트\nimport React, { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_EXPENSES = [{\n  id: \"e1\",\n  title: \"Toilet Paper\",\n  amount: 94.12,\n  date: new Date(2020, 7, 14)\n}, {\n  id: \"e2\",\n  title: \"New TV\",\n  amount: 799.49,\n  date: new Date(2021, 2, 12)\n}, {\n  id: \"e3\",\n  title: \"Car Insurance\",\n  amount: 294.67,\n  date: new Date(2021, 2, 28)\n}, {\n  id: \"e4\",\n  title: \"New Desk (Wooden)\",\n  amount: 450,\n  date: new Date(2021, 5, 12)\n}];\nconst App = () => {\n  _s();\n  const [expenses, SetExpenses] = useState(DUMMY_EXPENSES);\n  const addExpenseHandler = expense => {\n    //새로운 expense가 추가될 때 마다 실행됨\n    console.log(\"In App.js\", expense);\n    SetExpenses(prevExpenses => [expense, ...prevExpenses]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      expenses: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n//ExpenseItem을 html태그 처럼 사용가능하다.\n//단, 위의 방법으로 JSX코드를 사용할 떄 무조건 대문자로 시작되어야 한다. => 그림 리액트가 사용자지정 컴포넌트를 감지할 수 있다.\n//소문자로 시작하는 태그는 html태그이므로 내장요소로 찾을 것이고 대문자느 사용자에 의해 정의된 요소\n_s(App, \"WqiynaClXc+zJq58cFUFxhcSxbo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Expenses","NewExpense","jsxDEV","_jsxDEV","DUMMY_EXPENSES","id","title","amount","date","Date","App","_s","expenses","SetExpenses","addExpenseHandler","expense","console","log","prevExpenses","children","onAddExpense","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parkchaeyeon/Downloads/react-complete-guide/src/App.js"],"sourcesContent":["//사용자 지정 컴포넌트 임포트\nimport React, { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\nconst App = () => {\n  const [expenses, SetExpenses] = useState(DUMMY_EXPENSES);\n\n  const addExpenseHandler = (expense) => {\n    //새로운 expense가 추가될 때 마다 실행됨\n    console.log(\"In App.js\", expense);\n    SetExpenses((prevExpenses) => [expense, ...prevExpenses]);\n  };\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses expenses={expenses} />\n    </div>\n  );\n};\n//ExpenseItem을 html태그 처럼 사용가능하다.\n//단, 위의 방법으로 JSX코드를 사용할 떄 무조건 대문자로 시작되어야 한다. => 그림 리액트가 사용자지정 컴포넌트를 감지할 수 있다.\n//소문자로 시작하는 태그는 html태그이므로 내장요소로 찾을 것이고 대문자느 사용자에 의해 정의된 요소\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,UAAU,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC5D,MAAMC,cAAc,GAAG,CACrB;EACEC,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,cAAc;EACrBC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5B,CAAC,EACD;EAAEJ,EAAE,EAAE,IAAI;EAAEC,KAAK,EAAE,QAAQ;EAAEC,MAAM,EAAE,MAAM;EAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;AAAE,CAAC,EAC1E;EACEJ,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,eAAe;EACtBC,MAAM,EAAE,MAAM;EACdC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5B,CAAC,EACD;EACEJ,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,mBAAmB;EAC1BC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5B,CAAC,CACF;AACD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAACK,cAAc,CAAC;EAExD,MAAMU,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACAC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,OAAO,CAAC;IACjCF,WAAW,CAAEK,YAAY,IAAK,CAACH,OAAO,EAAE,GAAGG,YAAY,CAAC,CAAC;EAC3D,CAAC;EACD,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACF,UAAU;MAACmB,YAAY,EAAEN;IAAkB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC/CrB,OAAA,CAACH,QAAQ;MAACY,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC5B;AAEV,CAAC;AACD;AACA;AACA;AAAAb,EAAA,CAjBMD,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAkBT,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}